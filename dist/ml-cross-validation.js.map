{"version":3,"file":"ml-cross-validation.js","sources":["../node_modules/ml-confusion-matrix/src/index.js","../node_modules/ml-combinations/src/index.js","../src/getFolds.js","../src/sampleAClass.js","../src/index.js"],"sourcesContent":["/**\n *  Constructs a confusion matrix\n * @class ConfusionMatrix\n * @example\n * const CM = new ConfusionMatrix([[13, 2], [10, 5]], ['cat', 'dog'])\n * @param {Array<Array<number>>} matrix - The confusion matrix, a 2D Array. Rows represent the actual label and columns\n *     the predicted label.\n * @param {Array<any>} labels - Labels of the confusion matrix, a 1D Array\n */\nexport default class ConfusionMatrix {\n  constructor(matrix, labels) {\n    if (matrix.length !== matrix[0].length) {\n      throw new Error('Confusion matrix must be square');\n    }\n    if (labels.length !== matrix.length) {\n      throw new Error(\n        'Confusion matrix and labels should have the same length',\n      );\n    }\n    this.labels = labels;\n    this.matrix = matrix;\n  }\n\n  /**\n   * Construct confusion matrix from the predicted and actual labels (classes). Be sure to provide the arguments in\n   * the correct order!\n   * @param {Array<any>} actual  - The predicted labels of the classification\n   * @param {Array<any>} predicted     - The actual labels of the classification. Has to be of same length as\n   *     predicted.\n   * @param {object} [options] - Additional options\n   * @param {Array<any>} [options.labels] - The list of labels that should be used. If not provided the distinct set\n   *     of labels present in predicted and actual is used. Labels are compared using the strict equality operator\n   *     '==='\n   * @return {ConfusionMatrix} - Confusion matrix\n   */\n  static fromLabels(actual, predicted, options = {}) {\n    if (predicted.length !== actual.length) {\n      throw new Error('predicted and actual must have the same length');\n    }\n    let distinctLabels;\n    if (options.labels) {\n      distinctLabels = new Set(options.labels);\n    } else {\n      distinctLabels = new Set([...actual, ...predicted]);\n    }\n    distinctLabels = Array.from(distinctLabels);\n    if (options.sort) {\n      distinctLabels.sort(options.sort);\n    }\n\n    // Create confusion matrix and fill with 0's\n    const matrix = Array.from({ length: distinctLabels.length });\n    for (let i = 0; i < matrix.length; i++) {\n      matrix[i] = new Array(matrix.length);\n      matrix[i].fill(0);\n    }\n\n    for (let i = 0; i < predicted.length; i++) {\n      const actualIdx = distinctLabels.indexOf(actual[i]);\n      const predictedIdx = distinctLabels.indexOf(predicted[i]);\n      if (actualIdx >= 0 && predictedIdx >= 0) {\n        matrix[actualIdx][predictedIdx]++;\n      }\n    }\n\n    return new ConfusionMatrix(matrix, distinctLabels);\n  }\n\n  /**\n   * Get the confusion matrix\n   * @return {Array<Array<number> >}\n   */\n  getMatrix() {\n    return this.matrix;\n  }\n\n  getLabels() {\n    return this.labels;\n  }\n\n  /**\n   * Get the total number of samples\n   * @return {number}\n   */\n  getTotalCount() {\n    let predicted = 0;\n    for (let i = 0; i < this.matrix.length; i++) {\n      for (let j = 0; j < this.matrix.length; j++) {\n        predicted += this.matrix[i][j];\n      }\n    }\n    return predicted;\n  }\n\n  /**\n   * Get the total number of true predictions\n   * @return {number}\n   */\n  getTrueCount() {\n    let count = 0;\n    for (let i = 0; i < this.matrix.length; i++) {\n      count += this.matrix[i][i];\n    }\n    return count;\n  }\n\n  /**\n   * Get the total number of false predictions.\n   * @return {number}\n   */\n  getFalseCount() {\n    return this.getTotalCount() - this.getTrueCount();\n  }\n\n  /**\n   * Get the number of true positive predictions.\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getTruePositiveCount(label) {\n    const index = this.getIndex(label);\n    return this.matrix[index][index];\n  }\n\n  /**\n   * Get the number of true negative predictions\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getTrueNegativeCount(label) {\n    const index = this.getIndex(label);\n    let count = 0;\n    for (let i = 0; i < this.matrix.length; i++) {\n      for (let j = 0; j < this.matrix.length; j++) {\n        if (i !== index && j !== index) {\n          count += this.matrix[i][j];\n        }\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Get the number of false positive predictions.\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getFalsePositiveCount(label) {\n    const index = this.getIndex(label);\n    let count = 0;\n    for (let i = 0; i < this.matrix.length; i++) {\n      if (i !== index) {\n        count += this.matrix[i][index];\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Get the number of false negative predictions.\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getFalseNegativeCount(label) {\n    const index = this.getIndex(label);\n    let count = 0;\n    for (let i = 0; i < this.matrix.length; i++) {\n      if (i !== index) {\n        count += this.matrix[index][i];\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Get the number of real positive samples.\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getPositiveCount(label) {\n    return this.getTruePositiveCount(label) + this.getFalseNegativeCount(label);\n  }\n\n  /**\n   * Get the number of real negative samples.\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getNegativeCount(label) {\n    return this.getTrueNegativeCount(label) + this.getFalsePositiveCount(label);\n  }\n\n  /**\n   * Get the index in the confusion matrix that corresponds to the given label\n   * @param {any} label - The label to search for\n   * @throws if the label is not found\n   * @return {number}\n   */\n  getIndex(label) {\n    const index = this.labels.indexOf(label);\n    if (index === -1) throw new Error('The label does not exist');\n    return index;\n  }\n\n  /**\n   * Get the true positive rate a.k.a. sensitivity. Computes the ratio between the number of true positive predictions and the total number of positive samples.\n   * {@link https://en.wikipedia.org/wiki/Sensitivity_and_specificity}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number} - The true positive rate [0-1]\n   */\n  getTruePositiveRate(label) {\n    return this.getTruePositiveCount(label) / this.getPositiveCount(label);\n  }\n\n  /**\n   * Get the true negative rate a.k.a. specificity. Computes the ration between the number of true negative predictions and the total number of negative samples.\n   * {@link https://en.wikipedia.org/wiki/Sensitivity_and_specificity}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getTrueNegativeRate(label) {\n    return this.getTrueNegativeCount(label) / this.getNegativeCount(label);\n  }\n\n  /**\n   * Get the positive predictive value a.k.a. precision. Computes TP / (TP + FP)\n   * {@link https://en.wikipedia.org/wiki/Positive_and_negative_predictive_values}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getPositivePredictiveValue(label) {\n    const TP = this.getTruePositiveCount(label);\n    return TP / (TP + this.getFalsePositiveCount(label));\n  }\n\n  /**\n   * Negative predictive value\n   * {@link https://en.wikipedia.org/wiki/Positive_and_negative_predictive_values}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getNegativePredictiveValue(label) {\n    const TN = this.getTrueNegativeCount(label);\n    return TN / (TN + this.getFalseNegativeCount(label));\n  }\n\n  /**\n   * False negative rate a.k.a. miss rate.\n   * {@link https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#False_positive_and_false_negative_rates}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getFalseNegativeRate(label) {\n    return 1 - this.getTruePositiveRate(label);\n  }\n\n  /**\n   * False positive rate a.k.a. fall-out rate.\n   * {@link https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#False_positive_and_false_negative_rates}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getFalsePositiveRate(label) {\n    return 1 - this.getTrueNegativeRate(label);\n  }\n\n  /**\n   * False discovery rate (FDR)\n   * {@link https://en.wikipedia.org/wiki/False_discovery_rate}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getFalseDiscoveryRate(label) {\n    const FP = this.getFalsePositiveCount(label);\n    return FP / (FP + this.getTruePositiveCount(label));\n  }\n\n  /**\n   * False omission rate (FOR)\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getFalseOmissionRate(label) {\n    const FN = this.getFalseNegativeCount(label);\n    return FN / (FN + this.getTruePositiveCount(label));\n  }\n\n  /**\n   * F1 score\n   * {@link https://en.wikipedia.org/wiki/F1_score}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getF1Score(label) {\n    const TP = this.getTruePositiveCount(label);\n    return (\n      (2 * TP) /\n      (2 * TP +\n        this.getFalsePositiveCount(label) +\n        this.getFalseNegativeCount(label))\n    );\n  }\n\n  /**\n   * Matthews correlation coefficient (MCC)\n   * {@link https://en.wikipedia.org/wiki/Matthews_correlation_coefficient}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getMatthewsCorrelationCoefficient(label) {\n    const TP = this.getTruePositiveCount(label);\n    const TN = this.getTrueNegativeCount(label);\n    const FP = this.getFalsePositiveCount(label);\n    const FN = this.getFalseNegativeCount(label);\n    return (\n      (TP * TN - FP * FN) /\n      Math.sqrt((TP + FP) * (TP + FN) * (TN + FP) * (TN + FN))\n    );\n  }\n\n  /**\n   * Informedness\n   * {@link https://en.wikipedia.org/wiki/Youden%27s_J_statistic}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getInformedness(label) {\n    return (\n      this.getTruePositiveRate(label) + this.getTrueNegativeRate(label) - 1\n    );\n  }\n\n  /**\n   * Markedness\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getMarkedness(label) {\n    return (\n      this.getPositivePredictiveValue(label) +\n      this.getNegativePredictiveValue(label) -\n      1\n    );\n  }\n\n  /**\n   * Get the confusion table.\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {Array<Array<number> >} - The 2x2 confusion table. [[TP, FN], [FP, TN]]\n   */\n  getConfusionTable(label) {\n    return [\n      [this.getTruePositiveCount(label), this.getFalseNegativeCount(label)],\n      [this.getFalsePositiveCount(label), this.getTrueNegativeCount(label)],\n    ];\n  }\n\n  /**\n   * Get total accuracy.\n   * @return {number} - The ratio between the number of true predictions and total number of classifications ([0-1])\n   */\n  getAccuracy() {\n    let correct = 0;\n    let incorrect = 0;\n    for (let i = 0; i < this.matrix.length; i++) {\n      for (let j = 0; j < this.matrix.length; j++) {\n        if (i === j) correct += this.matrix[i][j];\n        else incorrect += this.matrix[i][j];\n      }\n    }\n    return correct / (correct + incorrect);\n  }\n\n  /**\n   * Returns the element in the confusion matrix that corresponds to the given actual and predicted labels.\n   * @param {any} actual - The true label\n   * @param {any} predicted - The predicted label\n   * @return {number} - The element in the confusion matrix\n   */\n  getCount(actual, predicted) {\n    const actualIndex = this.getIndex(actual);\n    const predictedIndex = this.getIndex(predicted);\n    return this.matrix[actualIndex][predictedIndex];\n  }\n\n  /**\n   * Compute the general prediction accuracy\n   * @deprecated Use getAccuracy\n   * @return {number} - The prediction accuracy ([0-1]\n   */\n  get accuracy() {\n    return this.getAccuracy();\n  }\n\n  /**\n   * Compute the number of predicted observations\n   * @deprecated Use getTotalCount\n   * @return {number}\n   */\n  get total() {\n    return this.getTotalCount();\n  }\n}\n","'use strict';\nconst defaultOptions = {\n  mode: 'index'\n};\n\nmodule.exports = function *(M, N, options) {\n  options = Object.assign({}, defaultOptions, options);\n  var a = new Array(N);\n  var c = new Array(M);\n  var b = new Array(N);\n  var p = new Array(N + 2);\n  var x, y, z;\n\n  // init a and b\n  for (var i = 0; i < N; i++) {\n    a[i] = i;\n    if (i < N - M) b[i] = 0;\n    else b[i] = 1;\n  }\n\n  // init c\n  for (i = 0; i < M; i++) {\n    c[i] = N - M + i;\n  }\n\n  // init p\n  for (i = 0; i < p.length; i++) {\n    if (i === 0) p[i] = N + 1;\n    else if (i <= N - M) p[i] = 0;\n    else if (i <= N) p[i] = i - N + M;\n    else p[i] = -2;\n  }\n\n  function twiddle() {\n    var i, j, k;\n    j = 1;\n    while (p[j] <= 0) {\n      j++;\n    }\n    if (p[j - 1] === 0) {\n      for (i = j - 1; i !== 1; i--) {\n        p[i] = -1;\n      }\n      p[j] = 0;\n      x = z = 0;\n      p[1] = 1;\n      y = j - 1;\n    } else {\n      if (j > 1) {\n        p[j - 1] = 0;\n      }\n      do {\n        j++;\n      }\n      while (p[j] > 0);\n      k = j - 1;\n      i = j;\n      while (p[i] === 0) {\n        p[i++] = -1;\n      }\n      if (p[i] === -1) {\n        p[i] = p[k];\n        z = p[k] - 1;\n        x = i - 1;\n        y = k - 1;\n        p[k] = -1;\n      } else {\n        if (i === p[0]) {\n          return 0;\n        } else {\n          p[j] = p[i];\n          z = p[i] - 1;\n          p[i] = 0;\n          x = j - 1;\n          y = i - 1;\n        }\n      }\n    }\n    return 1;\n  }\n\n  if (options.mode === 'index') {\n    yield c.slice();\n    while (twiddle()) {\n      c[z] = a[x];\n      yield c.slice();\n    }\n  } else if (options.mode === 'mask') {\n    yield b.slice();\n    while (twiddle()) {\n      b[x] = 1;\n      b[y] = 0;\n      yield b.slice();\n    }\n  } else {\n    throw new Error('Invalid mode');\n  }\n};\n","/**\n * get folds indexes\n * @param {Array} features\n * @param {Number} k - number of folds, a\n */\nexport function getFolds(features, k = 5) {\n  let N = features.length;\n  let allIdx = new Array(N);\n  for (let i = 0; i < N; i++) {\n    allIdx[i] = i;\n  }\n\n  let l = Math.floor(N / k);\n  // create random k-folds\n  let current = [];\n  let folds = [];\n  while (allIdx.length) {\n    let randi = Math.floor(Math.random() * allIdx.length);\n    current.push(allIdx[randi]);\n    allIdx.splice(randi, 1);\n    if (current.length === l) {\n      folds.push(current);\n      current = [];\n    }\n  }\n  // we push the remaining to the last fold so that the total length is\n  // preserved. Otherwise the Q2 will fail.\n  if (current.length) current.forEach((e) => folds[k - 1].push(e));\n  folds = folds.slice(0, k);\n\n  let foldsIndex = folds.map((x, idx) => ({\n    testIndex: x,\n    trainIndex: [].concat(...folds.filter((el, idx2) => idx2 !== idx)),\n  }));\n  return foldsIndex;\n}\n","/**\n * A function to sample a dataset maintaining classes equilibrated\n * @param {Array} classVector - an array containing class or group information\n * @param {Number} fraction - a fraction of the class to sample\n * @return {Object} - an object with indexes\n */\n\nexport function sampleAClass(classVector, fraction) {\n  // sort the vector\n  let classVectorSorted = JSON.parse(JSON.stringify(classVector));\n  let result = Array.from(Array(classVectorSorted.length).keys()).sort((a, b) =>\n    classVectorSorted[a] < classVectorSorted[b]\n      ? -1\n      : (classVectorSorted[b] < classVectorSorted[a]) | 0,\n  );\n  classVectorSorted.sort((a, b) => (a < b ? -1 : (b < a) | 0));\n\n  // counts the class elements\n  let counts = {};\n  classVectorSorted.forEach((x) => (counts[x] = (counts[x] || 0) + 1));\n\n  // pick a few per class\n  let indexOfSelected = [];\n\n  Object.keys(counts).forEach((e, i) => {\n    let shift = [];\n    Object.values(counts).reduce((a, c, item) => (shift[item] = a + c), 0);\n\n    let arr = [...Array(counts[e]).keys()];\n\n    let r = [];\n    for (let j = 0; j < Math.floor(counts[e] * fraction); j++) {\n      let n = arr[Math.floor(Math.random() * arr.length)];\n      r.push(n);\n      let ind = arr.indexOf(n);\n      arr.splice(ind, 1);\n    }\n\n    if (i === 0) {\n      indexOfSelected = indexOfSelected.concat(r);\n    } else {\n      indexOfSelected = indexOfSelected.concat(r.map((x) => x + shift[i - 1]));\n    }\n  });\n\n  // sort back the index\n  let trainIndex = [];\n  indexOfSelected.forEach((e) => trainIndex.push(result[e]));\n\n  let testIndex = [];\n  let mask = [];\n  classVector.forEach((el, idx) => {\n    if (trainIndex.includes(idx)) {\n      mask.push(true);\n    } else {\n      mask.push(false);\n      testIndex.push(idx);\n    }\n  });\n  return { trainIndex, testIndex, mask };\n}\n","import ConfusionMatrix from 'ml-confusion-matrix';\nimport combinations from 'ml-combinations';\n\nimport { getFolds } from './getFolds.js';\n\nexport { sampleAClass } from './sampleAClass.js';\nexport { getFolds } from './getFolds.js';\n\n/**\n * Performs a leave-one-out cross-validation (LOO-CV) of the given samples. In LOO-CV, 1 observation is used as the\n * validation set while the rest is used as the training set. This is repeated once for each observation. LOO-CV is a\n * special case of LPO-CV. @see leavePout\n * @param {function} Classifier - The classifier's constructor to use for the cross validation. Expect ml-classifier\n *     api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\n\nexport function leaveOneOut(Classifier, features, labels, classifierOptions) {\n  if (typeof labels === 'function') {\n    let callback = labels;\n    labels = features;\n    features = Classifier;\n    return leavePOut(features, labels, 1, callback);\n  }\n  return leavePOut(Classifier, features, labels, classifierOptions, 1);\n}\n\n/**\n * Performs a leave-p-out cross-validation (LPO-CV) of the given samples. In LPO-CV, p observations are used as the\n * validation set while the rest is used as the training set. This is repeated as many times as there are possible\n * ways to combine p observations from the set (unordered without replacement). Be aware that for relatively small\n * data-set size this can require a very large number of training and testing to do!\n * @param {function} Classifier - The classifier's constructor to use for the cross validation. Expect ml-classifier\n *     api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @param {number} p - The size of the validation sub-samples' set\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\nexport function leavePOut(Classifier, features, labels, classifierOptions, p) {\n  let callback;\n  if (typeof classifierOptions === 'function') {\n    callback = classifierOptions;\n    p = labels;\n    labels = features;\n    features = Classifier;\n  }\n  check(features, labels);\n  const distinct = getDistinct(labels);\n  const confusionMatrix = initMatrix(distinct.length, distinct.length);\n\n  let N = features.length;\n  let gen = combinations(p, N);\n  let allIdx = new Array(N);\n  for (let i = 0; i < N; i++) {\n    allIdx[i] = i;\n  }\n  for (const testIdx of gen) {\n    let trainIdx = allIdx.slice();\n\n    for (let i = testIdx.length - 1; i >= 0; i--) {\n      trainIdx.splice(testIdx[i], 1);\n    }\n\n    if (callback) {\n      validateWithCallback(\n        features,\n        labels,\n        testIdx,\n        trainIdx,\n        confusionMatrix,\n        distinct,\n        callback,\n      );\n    } else {\n      validate(\n        Classifier,\n        features,\n        labels,\n        classifierOptions,\n        testIdx,\n        trainIdx,\n        confusionMatrix,\n        distinct,\n      );\n    }\n  }\n\n  return new ConfusionMatrix(confusionMatrix, distinct);\n}\n\n/**\n * Performs k-fold cross-validation (KF-CV). KF-CV separates the data-set into k random equally sized partitions, and\n * uses each as a validation set, with all other partitions used in the training set. Observations left over from if k\n * does not divide the number of observations are left out of the cross-validation process.\n * @param {function} Classifier - The classifier's to use for the cross validation. Expect ml-classifier api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @param {number} k - The number of partitions to create\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\nexport function kFold(Classifier, features, labels, classifierOptions, k) {\n  let callback;\n  if (typeof classifierOptions === 'function') {\n    callback = classifierOptions;\n    k = labels;\n    labels = features;\n    features = Classifier;\n  }\n  check(features, labels);\n  const distinct = getDistinct(labels);\n  const confusionMatrix = initMatrix(distinct.length, distinct.length);\n\n  let folds = getFolds(features, k);\n\n  for (let i = 0; i < folds.length; i++) {\n    let testIdx = folds[i].testIndex;\n    let trainIdx = folds[i].trainIndex;\n\n    if (callback) {\n      validateWithCallback(\n        features,\n        labels,\n        testIdx,\n        trainIdx,\n        confusionMatrix,\n        distinct,\n        callback,\n      );\n    } else {\n      validate(\n        Classifier,\n        features,\n        labels,\n        classifierOptions,\n        testIdx,\n        trainIdx,\n        confusionMatrix,\n        distinct,\n      );\n    }\n  }\n\n  return new ConfusionMatrix(confusionMatrix, distinct);\n}\n\nfunction check(features, labels) {\n  if (features.length !== labels.length) {\n    throw new Error('features and labels should have the same length');\n  }\n}\n\nfunction initMatrix(rows, columns) {\n  return new Array(rows).fill(0).map(() => new Array(columns).fill(0));\n}\n\nfunction getDistinct(arr) {\n  let s = new Set();\n  for (let i = 0; i < arr.length; i++) {\n    s.add(arr[i]);\n  }\n  return Array.from(s);\n}\n\nfunction validate(\n  Classifier,\n  features,\n  labels,\n  classifierOptions,\n  testIdx,\n  trainIdx,\n  confusionMatrix,\n  distinct,\n) {\n  const { testFeatures, trainFeatures, testLabels, trainLabels } = getTrainTest(\n    features,\n    labels,\n    testIdx,\n    trainIdx,\n  );\n\n  let classifier;\n  if (Classifier.prototype.train) {\n    classifier = new Classifier(classifierOptions);\n    classifier.train(trainFeatures, trainLabels);\n  } else {\n    classifier = new Classifier(trainFeatures, trainLabels, classifierOptions);\n  }\n\n  let predictedLabels = classifier.predict(testFeatures);\n  updateConfusionMatrix(confusionMatrix, testLabels, predictedLabels, distinct);\n}\n\nfunction validateWithCallback(\n  features,\n  labels,\n  testIdx,\n  trainIdx,\n  confusionMatrix,\n  distinct,\n  callback,\n) {\n  const { testFeatures, trainFeatures, testLabels, trainLabels } = getTrainTest(\n    features,\n    labels,\n    testIdx,\n    trainIdx,\n  );\n  const predictedLabels = callback(trainFeatures, trainLabels, testFeatures);\n  updateConfusionMatrix(confusionMatrix, testLabels, predictedLabels, distinct);\n}\n\nfunction updateConfusionMatrix(\n  confusionMatrix,\n  testLabels,\n  predictedLabels,\n  distinct,\n) {\n  for (let i = 0; i < predictedLabels.length; i++) {\n    const actualIdx = distinct.indexOf(testLabels[i]);\n    const predictedIdx = distinct.indexOf(predictedLabels[i]);\n    if (actualIdx < 0 || predictedIdx < 0) {\n      // eslint-disable-next-line no-console\n      console.warn(`ignore unknown predicted label ${predictedLabels[i]}`);\n    }\n    confusionMatrix[actualIdx][predictedIdx]++;\n  }\n}\n\nexport function getTrainTest(features, labels, testIdx, trainIdx) {\n  return {\n    testFeatures: testIdx.map(function(index) {\n      return features[index];\n    }),\n    trainFeatures: trainIdx.map(function(index) {\n      return features[index];\n    }),\n    testLabels: testIdx.map(function(index) {\n      return labels[index];\n    }),\n    trainLabels: trainIdx.map(function(index) {\n      return labels[index];\n    }),\n  };\n}\n"],"names":["ConfusionMatrix","constructor","matrix","labels","length","Error","fromLabels","actual","predicted","options","distinctLabels","Set","Array","from","sort","i","fill","actualIdx","indexOf","predictedIdx","getMatrix","getLabels","getTotalCount","j","getTrueCount","count","getFalseCount","getTruePositiveCount","label","index","getIndex","getTrueNegativeCount","getFalsePositiveCount","getFalseNegativeCount","getPositiveCount","getNegativeCount","getTruePositiveRate","getTrueNegativeRate","getPositivePredictiveValue","TP","getNegativePredictiveValue","TN","getFalseNegativeRate","getFalsePositiveRate","getFalseDiscoveryRate","FP","getFalseOmissionRate","FN","getF1Score","getMatthewsCorrelationCoefficient","Math","sqrt","getInformedness","getMarkedness","getConfusionTable","getAccuracy","correct","incorrect","getCount","actualIndex","predictedIndex","accuracy","total","defaultOptions","mode","M","N","Object","assign","a","c","b","p","x","y","z","twiddle","k","slice","getFolds","features","allIdx","l","floor","current","folds","randi","random","push","splice","forEach","e","foldsIndex","map","idx","testIndex","trainIndex","concat","filter","el","idx2","sampleAClass","classVector","fraction","classVectorSorted","JSON","parse","stringify","result","keys","counts","indexOfSelected","shift","values","reduce","item","arr","r","n","ind","mask","includes","leaveOneOut","Classifier","classifierOptions","callback","leavePOut","check","distinct","getDistinct","confusionMatrix","initMatrix","gen","combinations","testIdx","trainIdx","validateWithCallback","validate","kFold","rows","columns","s","add","testFeatures","trainFeatures","testLabels","trainLabels","getTrainTest","classifier","prototype","train","predictedLabels","predict","updateConfusionMatrix","console","warn"],"mappings":"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"}